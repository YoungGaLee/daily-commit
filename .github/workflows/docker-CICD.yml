name: Docker Image CI/CD     # workflow 이름

# main 브런치에 push라는 Event가 발생할때
on:     
  push:
    branches: [ "main" ]

# 수행할 작업내용들
jobs:   
  # 1. CI - 통합 (build)
  build:
    runs-on: ubuntu-latest
    steps:
      # step1. 저장소의 main 브랜치 내려받기
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main 
      # step2. JDK 17 설치
      - name: Set Up JDK 17
        uses: actions/setup-java@v4  # 해당도구 활용
        with: # 요구사항
          java-version: '17'
          distribution: 'temurin'
      # step3. gradle 실행시킬 수 있는 권한 부여
      - name: Grant permission for gradlew
        run: chmod +x ./gradlew  #해당명령어 수행 (내용: ./gradlew(빌드용스크립트파일) 파일의 실행권한부여)
      # step4. Gradle Build (jar 생성)
      - name: Build with Gradle
        run: ./gradlew clean build -x test  # 테스트 생략하고 빌드하겠다
      # step5. Dockerfile 가지고 도커이미지로 빌드 및 허브에 발행(push) // 만든 이미지를 도커허브에 올릴 것임. (그럼 어떤 환경에서든 내려받아쓸 수 있음)
      - name: Docker build and publish
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} #도커로그인 (u:계정명, p:비밀번호) //settings>secret&variable>Action>repository secret에 등록
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }} ./  #도커이미지로빌드  // 계정명/이미지명
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }}  #도커허브에발행 

          # | 여러줄로 명령어 작설할 수 있음 (파이프라인)
        
  # 2. CD - 배포 (deploy)
  deploy:
    # build job이 성공 시에만 deploy가 수행되도록 
    needs: build
    runs-on: ubuntu-latest
    steps:
      # step1. NCP SSH 접속 / Docker image pull & run
      # SSH 포트만 열려있으면 aws든 어떤 클라우드던지 연결가능
      # 깃허브 마켓플레이스 https://github.com/marketplace?type=actions&category=deployment에서 ssh참고해서 연결할 수 있음
      - name: NCP SSH Login and Docker Image pull and run
        uses: appleboy/ssh-action@v1   // SSH Remote Commands > 리드미 quick start 코드 복사해옴
        with:
          host: ${{ secrets.NCP_HOST }}
          username: ${{ secrets.NCP_USERNAME }}
          password: ${{ secrets.NCP_PASSWORD }}
          key: ${{ secrets.NCP_KEY }}
          port: ${{ secrets.NCP_PORT }}
          script: |  #NCP서버에서 진행시킬 것
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} # 도커로그인
            docker stop ${{ vars.APP_NAME }} 
            docker rm -f ${{ vars.APP_NAME }}  # 기존 컨테이너 삭제
            docker image rm -f ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }} # 기존의 이미지 삭제
            docker run -d -p 8080:8080 \  # 도커이미지로 컨테이너 실행
            -e SPRING_PROFILES_ACTIVE=prod \
            -e PROD_DB_URL=${{ secrets.PROD_DB_URL }} \
            -e PROD_DB_USERNAME=${{ secrets.PROD_DB_USERNAME }} \ # DB 서버 정보들 
            -e PROD_DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }} \
            --name ${{ vars.APP_NAME }} \
            ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }}
